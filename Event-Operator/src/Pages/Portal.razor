@page "/portal/{name}"
@using FP.ContainerTraining.EventOperator.CustomResources
@using k8s
@using k8s.Models

@inject CustomResourceDefinition<EventPortal> CrdEventPortal
@inject CustomResourceDefinition<IngressRoute> CrdIngressRoute
@inject IKubernetes Kubernetes;
@inject IConfiguration Configuration;

@if (Model == null)
{
    return;
}


<MudGrid>
    <MudItem xs="4">
        <MudTextField @bind-Value="Model.Name" Label="Name" ReadOnly="true"></MudTextField>
    </MudItem>
    <MudItem xs="4">
        <MudTextField @bind-Value="Model.Namespace" Label="Namespace" ReadOnly="true"></MudTextField>
    </MudItem>
    <MudItem xs="4">
        <MudTextField @bind-Value="Model.BaseUrl" Label="BaseUrl" ReadOnly="true"></MudTextField>
    </MudItem>
        <MudItem xs="4">
            <MudTextField @bind-Value="Model.Server" Label="Server" ReadOnly="true"></MudTextField>
        </MudItem>
        <MudItem xs="4">
            <MudTextField @bind-Value="Model.SshUser" Label="SshUser" ReadOnly="true"></MudTextField>
        </MudItem>
    <MudItem xs="4">
        <MudTextField @bind-Value="Model.SshPassword" Label="SshPassword" ReadOnly="true"></MudTextField>
    </MudItem>
    
    <MudItem xs="12">
    
    <MudTable Items="Model.ObjectsInNamespace" Hover="true" Striped="true" Bordered="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Kind</MudTh>
            <MudTh>API-Version</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Erstellt am</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Kind">@context.Kind</MudTd>
            <MudTd DataLabel="ApiVersion">@context.ApiVersion</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="CreationTimestamp">@context.CreationTimestamp</MudTd>
        </RowTemplate>
    </MudTable>
    </MudItem>
</MudGrid>

@code {
    
    [Parameter]
    public string Name { get; set; }
    
    private EventPortalViewModel? Model { get; set; }
    

    protected override async Task OnParametersSetAsync()
    {
        
        if (Model == null)
        {
            Model = new EventPortalViewModel();
        }

        if (Model.Name == Name)
        {
            return;
        }
        Model.Name = Name;
        if (!string.IsNullOrEmpty(Name))
        {
            await RefreshEventPortal();    
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await RefreshEventPortal();
        
        using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(10));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            await RefreshEventPortal();
        }
    }

    private async Task RefreshEventPortal()
    {
        if (string.IsNullOrEmpty(Name) || Model == null)
        {
            return;
        }
        var eventPortal = await CrdEventPortal.GetObjectOrDefaultAsync(Kubernetes, Name, Configuration["PortalNamespace"]);
        if (eventPortal is null)
        {
            return;
        }
        var @namespace = eventPortal.Spec.Namespace;

        var pods = await Kubernetes.CoreV1.ListNamespacedPodAsync(@namespace);
        var deployments = await Kubernetes.AppsV1.ListNamespacedDeploymentAsync(@namespace);
        var services = await Kubernetes.CoreV1.ListNamespacedServiceAsync(@namespace);
        var ingressroutes = await CrdIngressRoute.GetObjectsAsync(Kubernetes, @namespace);
        
        Model.CreationTimestamp = eventPortal.Metadata.CreationTimestamp;
        Model.BaseUrl = eventPortal.Spec.BaseUrl;
        Model.Namespace = eventPortal.Spec.Namespace;
        Model.Server = eventPortal.Spec.Server;
        Model.SshUser = eventPortal.Spec.SshUser;
        Model.SshPassword = eventPortal.Spec.SshPassword;
        Model.PortalPassword = eventPortal.Spec.PortalPassword;
        Model.CodeServer = MapEventPortalApp(eventPortal.Spec.CodeServer);
        Model.ShellInABox = MapEventPortalApp(eventPortal.Spec.ShellInABox);

        foreach (var pod in pods.Items)
        {
            Model.AddObjectIfNotExists(pod, "v1", "Pod");
        }
        foreach (var deployment in deployments.Items)
        {
            Model.AddObjectIfNotExists(deployment, "apps/v1", "Deployment");
        }
        
        foreach (var service in services.Items)
        {
            Model.AddObjectIfNotExists(service, "v1", "Service");
        }
        
        foreach (var ingressroute in ingressroutes)
        {
            Model.AddObjectIfNotExists(ingressroute);
        }
        
        var uids = new List<string>();
        uids.AddRange(pods.Items.Select(x => x.Metadata.Uid));
        uids.AddRange(deployments.Items.Select(x => x.Metadata.Uid));
        uids.AddRange(services.Items.Select(x => x.Metadata.Uid));
        uids.AddRange(ingressroutes.Select(x => x.Metadata.Uid));
        Model.ObjectsInNamespace.RemoveAll(o => !uids.Contains(o.Uid));

        await InvokeAsync(StateHasChanged);
    }

    private EventPortalAppViewModel MapEventPortalApp(EventPortalApplicationSpec app)
    {
        return new EventPortalAppViewModel
        {
            Image = app.Image,
            Port = app.Port,
            Prefix = app.Prefix
        };
    }


    public class EventPortalViewModel
    {
        public string Name { get; set; }

        public string Namespace { get; set; }

        public string Server { get; set; }

        public string BaseUrl { get; set; }

        public DateTime? CreationTimestamp { get; set; }
        
        public string SshUser { get; set; }

        public string SshPassword { get; set; }

        public string PortalPassword { get; set; }

        public EventPortalAppViewModel ShellInABox { get; set; }

        public EventPortalAppViewModel CodeServer { get; set; }

        public List<KubernetesMetaViewModel> ObjectsInNamespace { get; } = new List<KubernetesMetaViewModel>();

        public void AddObjectIfNotExists(IKubernetesObject<V1ObjectMeta> objWithMeta, string apiVersion = "", string kind = "")
        {
            if (ObjectsInNamespace.Any(x => x.Uid == objWithMeta.Metadata.Uid))
            {
                return;
            }
            
            var vm =  new KubernetesMetaViewModel
            {
                Uid = objWithMeta.Metadata.Uid,
                Name = objWithMeta.Metadata.Name,
                CreationTimestamp = objWithMeta.Metadata.CreationTimestamp,
                ApiVersion = string.IsNullOrEmpty(apiVersion) ? objWithMeta.ApiVersion : apiVersion,
                Kind = string.IsNullOrEmpty(kind) ? objWithMeta.Kind : kind
            };

            ObjectsInNamespace.Add(vm);
        }
    }

    public class EventPortalAppViewModel
    {
        public string Prefix { get; set; }

        public string Image { get; set; }

        public int Port { get; set; }
    }

    public class KubernetesMetaViewModel
    {
        public string Uid { get; set; }
        
        public string Name { get; set; }

        public string ApiVersion { get; set; }

        public string Kind { get; set; }

        public DateTime? CreationTimestamp { get; set; }
       
    }
}