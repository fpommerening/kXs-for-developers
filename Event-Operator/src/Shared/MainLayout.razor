@using FP.ContainerTraining.EventOperator.Authentication
@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject NavigationManager _navigationManager;

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <AuthorizeView>
            <NotAuthorized>
                <MudIconButton Icon="@Icons.Material.Filled.Login" Title="Login" Color="Color.Inherit"  Href="/login" />
            </NotAuthorized>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Title="Logout" Color="Color.Inherit" OnClick="Logout"  Href="/login" />
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Event Operator</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void Logout()
    {
        (_authenticationStateProvider as CustomAuthenticationStateProvider)?.UpdateAuthenticationState(null);
        _navigationManager.NavigateTo("/", true);
    }
}