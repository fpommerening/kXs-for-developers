@page "/Jobs"
@using FP.ContainerTraining.Hpa.Manager.Business

@inject IJobRepository _jobRepository;

<MudGrid>
    <MudItem xs="2"></MudItem>
    <MudItem xs="4">
        <MudSlider @bind-Value="JobCount" Min="1" Max="15" Color="Color.Info">Value: @JobCount.ToString()</MudSlider>
    </MudItem>
    <MudItem xs="2">
        <MudButton OnClick="AddJobs" Variant="Variant.Outlined" Color="Color.Primary">Add Job(s)</MudButton>
    </MudItem>
    <MudItem xs="4"></MudItem>
    <MudItem xs="12">
        <MudTable Items="SortedData" Hover="true" Striped="true"Bordered="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Created At</MudTh>
                <MudTh>Assigned At</MudTh>
                <MudTh>Worker</MudTh>
                <MudTh>Completed At</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="CreatedAt">@context.CreatedAt</MudTd>
                <MudTd DataLabel="AssignedAt">@context.AssignedAt</MudTd>
                <MudTd DataLabel="AssignedWorker">@context.AssignedWorker</MudTd>
                <MudTd DataLabel="CompletedAt">@context.CompletedAt</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {

    private List<JobViewModel> _data = new();

    private IEnumerable<JobViewModel> SortedData
    {
        get { return _data.OrderBy(x => x.CompletedAt).ThenByDescending(x => x.AssignedAt).ThenBy(x => x.CreatedAt); }
    }

    private int JobCount { get; set; } = 1;

    private async Task AddJobs()
    {
        await _jobRepository.Add(JobCount);
        await RefreshJobs();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await RefreshJobs();
        
        using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(10));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            await RefreshJobs();
        }
    }

    private async Task RefreshJobs()
    {
        foreach (var job in _jobRepository.GetJobs().OrderByDescending(x=>x.CreatedAt))
        {
            var vm = _data.FirstOrDefault(x => x.Id == job.Id);
            if (vm == null)
            {
                vm = new JobViewModel
                {
                    Id = job.Id,
                    CreatedAt = job.CreatedAt
                };
                _data.Add(vm);
            }
            vm.AssignedAt = job.AssignedAt;
            vm.AssignedWorker = job.AssignedWorker;
            vm.CompletedAt = job.CompletedAt;
        }
        
        await InvokeAsync(StateHasChanged);
    }


    public class JobViewModel
    {
        public Guid Id { get; init; }
        
        public DateTime CreatedAt { get; init; }
        
        public DateTime?  AssignedAt { get; set; }
        
        public string?  AssignedWorker { get; set; }
        
        
        public DateTime? CompletedAt { get; set; }
        
    }
}